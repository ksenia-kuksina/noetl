# NoETL DSL Playbook for Amadeus API integration
# This playbook demonstrates how to:
# 1. Use Google Cloud Secret Manager to retrieve API keys
# 2. Initialize Amadeus and OpenAI clients
# 3. Convert natural language queries to Amadeus API calls
# 4. Execute Amadeus API calls
# 5. Convert Amadeus API responses to natural language
#
# Usage:
# noetl playbook --register playbook/amadeus_api.yaml --port 8080
# noetl playbook --execute --path "workflows/amadeus/amadeus_api" --payload '{"query": "I want a one-way flight from SFO to JFK on September 15, 2025 for 1 adult"}'

apiVersion: noetl.io/v1
kind: Playbook
name: amadeus_api
path: amadeus/amadeus_api

workload:
  jobId: "{{ job.uuid }}"
  execution_id: "{{ job.uuid }}"
  project_id: "noetl-demo-19700101"
  credentials_path: ".secrets/noetl-service-account.json"
  query: "I want a one-way flight from SFO to JFK on September 15, 2025 for 1 adult"
  pg_host: "{{ env.POSTGRES_HOST | default('localhost') }}"
  pg_port: "{{ env.POSTGRES_PORT | default('5432') }}"
  pg_user: "{{ env.POSTGRES_USER | default('postgres') }}"
  pg_password: "{{ env.POSTGRES_PASSWORD | default('postgres') }}"
  pg_db: "{{ env.POSTGRES_DB | default('noetl') }}"

workflow:
  - step: start
    desc: "Start Amadeus API Workflow"
    next:
      - step: create_results_table

  - step: create_results_table
    desc: "Create results table in Postgres if not exists"
    type: workbook
    task: create_results_table_task
    next:
      - step: get_openai_api_key

  - step: get_openai_api_key
    desc: "Retrieve OpenAI API key from Google Secret Manager"
    type: workbook
    task: get_openai_api_key_task
    next:
      - step: get_amadeus_api_key

  - step: get_amadeus_api_key
    desc: "Retrieve Amadeus API key from Google Secret Manager"
    type: workbook
    task: get_amadeus_api_key_task
    next:
      - step: get_amadeus_api_secret

  - step: get_amadeus_api_secret
    desc: "Retrieve Amadeus API secret from Google Secret Manager"
    type: workbook
    task: get_amadeus_api_secret_task
    next:
      - step: process_natural_language

  - step: process_natural_language
    desc: "Convert natural language query to Amadeus API call"
    type: workbook
    task: process_natural_language_task
    with:
      query: "{{ workload.query }}"
      openai_api_key: "{{ get_openai_api_key.secret_value }}"
    next:
      - step: parse_amadeus_query

  - step: parse_amadeus_query
    desc: "Parse the Amadeus query to extract endpoint and parameters"
    type: workbook
    task: parse_amadeus_query_task
    with:
      amadeus_query: "{{ process_natural_language.amadeus_query }}"
    next:
      - step: get_amadeus_token

  - step: get_amadeus_token
    desc: "Get Amadeus API access token"
    type: workbook
    task: get_amadeus_token_task
    with:
      amadeus_api_key: "{{ get_amadeus_api_key.secret_value }}"
      amadeus_api_secret: "{{ get_amadeus_api_secret.secret_value }}"
    next:
      - step: execute_amadeus_query

  - step: execute_amadeus_query
    desc: "Execute Amadeus API query"
    type: workbook
    task: execute_amadeus_query_task
    with:
      endpoint_path: "{{ parse_amadeus_query.endpoint_path }}"
      query_params: "{{ parse_amadeus_query.query_params }}"
      access_token: "{{ get_amadeus_token.access_token }}"
    next:
      - step: insert_amadeus_result

  - step: insert_amadeus_result
    desc: "Insert Amadeus API result into Postgres"
    type: workbook
    task: insert_amadeus_result_task
    with:
      execution_id: "{{ workload.execution_id }}"
      source: "amadeus"
      result: "{{ execute_amadeus_query }}"
    next:
      - step: process_amadeus_response

  - step: process_amadeus_response
    desc: "Convert Amadeus API response to natural language"
    type: workbook
    task: process_amadeus_response_task
    with:
      amadeus_response: "{{ execute_amadeus_query }}"
      openai_api_key: "{{ get_openai_api_key.secret_value }}"
    next:
      - step: insert_openai_result

  - step: insert_openai_result
    desc: "Insert OpenAI result into Postgres"
    type: workbook
    task: insert_openai_result_task
    with:
      execution_id: "{{ workload.execution_id }}"
      source: "openai"
      result: "{{ process_amadeus_response.result }}"
    next:
      - step: end

  - step: end
    desc: "End of workflow"
    with:
      result: "{{ process_amadeus_response.result }}"

workbook:
  - name: get_openai_api_key_task
    type: secrets
    provider: google
    project_id: "{{ workload.project_id }}"
    secret_name: "openai-api-key"

  - name: get_amadeus_api_key_task
    type: secrets
    provider: google
    project_id: "{{ workload.project_id }}"
    secret_name: "api-key-test-api-amadeus-com"

  - name: get_amadeus_api_secret_task
    type: secrets
    provider: google
    project_id: "{{ workload.project_id }}"
    secret_name: "api-secret-test-api-amadeus-com"

  - name: process_natural_language_task
    type: http
    method: POST
    endpoint: "https://api.openai.com/v1/chat/completions"
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{ openai_api_key }}"
    payload:
      model: "gpt-4o"
      messages:
        - role: "system"
          content: |
            You are a translator that converts natural-language travel queries into Python code using the Amadeus Python SDK.

            When given a request, follow these steps:
            1. Understand what the user wants: flight search, hotel offers, airport search, etc.
            2. Map the details (origin, destination, dates, passengers, etc.) to the correct SDK method and parameters.
            3. Return only the Amadeus Python SDK method call in code form (no explanations).
            4. Do not include SDK setup or credentialsâ€”assume `amadeus = Client(...)` already exists.
            5. Use real values from user input, and apply correct formatting (e.g., ISO dates).
            6. Output only the function call, not JSON responses or error handling logic.
            7. If values are ambiguous or missing, make reasonable assumptions.
            8. If the user provides a travel date **without a year**, assume they mean 2025.
            9. Always **limit the number of returned results to 3**, using `max=3` or equivalent where available.
        - role: "user"
          content: "{{ query }}"
    with:
      query: "{{ query }}"
      openai_api_key: "{{ openai_api_key }}"
    return: |
      {% if status == 'success' %}
      {
        "status": "success",
        "amadeus_query": "{{ data.choices[0].message.content }}"
      }
      {% else %}
      {
        "status": "error",
        "message": "OpenAI API Error: HTTP {{ status_code }}: {{ data }}"
      }
      {% endif %}

  - name: parse_amadeus_query_task
    type: python
    with:
      amadeus_query: "{{ amadeus_query }}"
    code: |
      import re
      import json

      def main(amadeus_query):
          try:
              print(f"Parsing amadeus_query: {amadeus_query}")

              # Clean up the query string - remove code blocks if present
              if amadeus_query.startswith('```python'):
                  amadeus_query = amadeus_query.replace('```python', '').replace('```', '').strip()

              print(f"Cleaned amadeus_query: {amadeus_query}")

              # Extract the method name and parameters from the Amadeus query
              # Example: amadeus.shopping.flight_offers_search.get(originLocationCode='SFO', destinationLocationCode='JFK', departureDate='2025-09-15', adults=1)

              # Extract the method path
              method_match = re.search(r'amadeus\.([a-zA-Z_.]+)\.get\(', amadeus_query)
              if not method_match:
                  return {
                      "status": "error",
                      "message": f"Could not parse Amadeus method from query: {amadeus_query}"
                  }

              method_path = method_match.group(1).replace('.', '/')
              print(f"Extracted method_path: {method_path}")

              # Extract parameters
              params_match = re.search(r'get\((.*)\)', amadeus_query)
              if not params_match:
                  return {
                      "status": "error",
                      "message": "Could not parse parameters from query"
                  }

              params_str = params_match.group(1)
              print(f"Extracted params_str: {params_str}")

              # Convert parameters to dictionary
              params = {}
              for param in params_str.split(','):
                  if '=' in param:
                      key, value = param.split('=', 1)
                      key = key.strip()
                      value = value.strip().strip("'\"")
                      params[key] = value

              print(f"Final params: {params}")

              return {
                  "status": "success",
                  "endpoint_path": method_path,
                  "query_params": params
              }
          except Exception as e:
              return {
                  "status": "error",
                  "message": f"Failed to parse Amadeus query: {str(e)}"
              }

  - name: get_amadeus_token_task
    type: http
    method: POST
    endpoint: "https://test.api.amadeus.com/v1/security/oauth2/token"
    headers:
      Content-Type: "application/x-www-form-urlencoded"
    payload:
      grant_type: "client_credentials"
      client_id: "{{ amadeus_api_key }}"
      client_secret: "{{ amadeus_api_secret }}"
    return: |
      {% if status == 'success' %}
      {
        "status": "success",
        "access_token": "{{ data.access_token }}",
        "token_type": "{{ data.token_type }}",
        "expires_in": "{{ data.expires_in }}"
      }
      {% else %}
      {
        "status": "error",
        "message": "HTTP {{ status_code }}: {{ data }}"
      }
      {% endif %}


  - name: execute_amadeus_query_task
    type: http
    method: GET
    endpoint: "https://test.api.amadeus.com/v1/{{ endpoint_path }}"
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    params: "{{ query_params }}"
    with:
      endpoint_path: "{{ endpoint_path }}"
      query_params: "{{ query_params }}"
      access_token: "{{ access_token }}"
    return: |
      {% if status == 'success' %}
      {
        "status": "success",
        "amadeus_response": "{{ data | tojson }}"
      }
      {% else %}
      {
        "status": "error",
        "message": "HTTP {{ status_code }}: {{ data }}"
      }
      {% endif %}

  - name: process_amadeus_response_task
    type: http
    method: POST
    endpoint: "https://api.openai.com/v1/chat/completions"
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{ openai_api_key }}"
    payload:
      model: "gpt-4o"
      messages:
        - role: "system"
          content: "You are a helpful assistant that reads raw JSON responses from the Amadeus API and summarizes them into clear, human-readable language. Your task is to: 1. Read and understand the JSON response structure (e.g. flights, hotels, etc.). 2. Identify key information relevant to the user (e.g. origin/destination, dates, price, airline, stops, hotel name, stars, location, price). 3. Summarize the most important details in clean, natural English. 4. Use lists, bullet points, and grouping if appropriate. 5. Do not show any raw JSON keys or code â€” just understandable sentences. 6. For IATA codes always write a transcription (i.e. SVO will be Sheremetyevo International Airport)"
        - role: "user"
          content: >-
            {% if amadeus_response is mapping %}
              {% if amadeus_response.result is defined and amadeus_response.result is mapping and amadeus_response.result.amadeus_response is defined %}
                {{ amadeus_response.result.amadeus_response }}
              {% elif amadeus_response.result is defined %}
                {{ amadeus_response.result | tojson }}
              {% elif amadeus_response.amadeus_response is defined %}
                {{ amadeus_response.amadeus_response }}
              {% elif amadeus_response.data is defined %}
                {{ amadeus_response.data | tojson }}
              {% else %}
                {{ amadeus_response | tojson }}
              {% endif %}
            {% else %}
              {{ amadeus_response }}
            {% endif %}
    with:
      amadeus_response: "{{ amadeus_response }}"
      openai_api_key: "{{ openai_api_key }}"
    return: |
      {% if status == 'success' %}
      {
        "status": "success",
        "result": {% if result.data is defined and result.data.choices is defined and result.data.choices[0] is defined and result.data.choices[0].message is defined and result.data.choices[0].message.content is defined %}"{{ result.data.choices[0].message.content }}"{% else %}"No content found in response"{% endif %}
      }
      {% else %}
      {
        "status": "error",
        "message": "OpenAI API Error: {{ result.error | default('Unknown error') }}"
      }
      {% endif %}

  - name: create_results_table_task
    type: postgres
    with:
      db_host: "{{ workload.pg_host }}"
      db_port: "{{ workload.pg_port }}"
      db_user: "{{ workload.pg_user }}"
      db_password: "{{ workload.pg_password }}"
      db_name: "{{ workload.pg_db }}"
    command: |
      CREATE TABLE IF NOT EXISTS api_results (
        id SERIAL PRIMARY KEY,
        execution_id VARCHAR(64),
        source VARCHAR(32),
        result JSONB,
        created_at TIMESTAMP DEFAULT NOW()
      );

  - name: insert_amadeus_result_task
    type: postgres
    with:
      db_host: "{{ workload.pg_host }}"
      db_port: "{{ workload.pg_port }}"
      db_user: "{{ workload.pg_user }}"
      db_password: "{{ workload.pg_password }}"
      db_name: "{{ workload.pg_db }}"
      execution_id: "{{ execution_id }}"
      source: "{{ source }}"
      result: "{{ result }}"
    command: |
      INSERT INTO api_results (execution_id, source, result)
      VALUES ('{{ execution_id }}', '{{ source }}', '{{ result | tojson }}');

  - name: insert_openai_result_task
    type: postgres
    with:
      db_host: "{{ workload.pg_host }}"
      db_port: "{{ workload.pg_port }}"
      db_user: "{{ workload.pg_user }}"
      db_password: "{{ workload.pg_password }}"
      db_name: "{{ workload.pg_db }}"
      execution_id: "{{ execution_id }}"
      source: "{{ source }}"
      result: "{{ result }}"
    command: |
      INSERT INTO api_results (execution_id, source, result)
      VALUES ('{{ execution_id }}', '{{ source }}', '{{ result | tojson }}');
