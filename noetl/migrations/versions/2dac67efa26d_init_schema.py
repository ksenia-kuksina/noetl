"""init schema

Revision ID: 2dac67efa26d
Revises: 
Create Date: 2025-05-04 00:56:44.634709

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel
from sqlalchemy.types import Text
# revision identifiers, used by Alembic.
revision: str = '2dac67efa26d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('event_state',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('template', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('transitions', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_table('resource_type',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_table('catalog',
    sa.Column('resource_path', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('resource_version', sqlmodel.sql.sqltypes.AutoString(length=11), nullable=False),
    sa.Column('resource_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('resource_location', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('payload', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('meta', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('labels', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('template', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['resource_type'], ['resource_type.name'], ),
    sa.PrimaryKeyConstraint('resource_path', 'resource_version'),
    sa.UniqueConstraint('resource_path', 'resource_version', name='uq_catalog_path_version')
    )
    op.create_index(op.f('ix_catalog_resource_version'), 'catalog', ['resource_version'], unique=False)
    op.create_table('registry',
    sa.Column('registry_id', sqlmodel.sql.sqltypes.AutoString(length=36), nullable=False),
    sa.Column('resource_path', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('resource_version', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('namespace', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('payload', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('meta', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('labels', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['resource_path', 'resource_version'], ['catalog.resource_path', 'catalog.resource_version'], name='fk_registry_catalog'),
    sa.PrimaryKeyConstraint('registry_id')
    )
    op.create_table('execution',
    sa.Column('execution_id', sqlmodel.sql.sqltypes.AutoString(length=36), nullable=False),
    sa.Column('registry_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('logs', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('labels', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['registry_id'], ['registry.registry_id'], ),
    sa.PrimaryKeyConstraint('execution_id')
    )
    op.create_table('context',
    sa.Column('context_id', sqlmodel.sql.sqltypes.AutoString(length=36), nullable=False),
    sa.Column('execution_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('payload', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('meta', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('labels', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['execution_id'], ['execution.execution_id'], ),
    sa.PrimaryKeyConstraint('context_id')
    )
    op.create_table('event',
    sa.Column('event_id', sqlmodel.sql.sqltypes.AutoString(length=36), nullable=False),
    sa.Column('parent_id', sqlmodel.sql.sqltypes.AutoString(length=36), nullable=True),
    sa.Column('registry_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('execution_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('context_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('event_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('event_state', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('event_message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('payload', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('meta', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('labels', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['context_id'], ['context.context_id'], ),
    sa.ForeignKeyConstraint(['event_state'], ['event_state.name'], ),
    sa.ForeignKeyConstraint(['execution_id'], ['execution.execution_id'], ),
    sa.ForeignKeyConstraint(['registry_id'], ['registry.registry_id'], ),
    sa.PrimaryKeyConstraint('event_id')
    )
    op.create_index(op.f('ix_event_context_id'), 'event', ['context_id'], unique=False)
    op.create_index(op.f('ix_event_execution_id'), 'event', ['execution_id'], unique=False)
    op.create_index(op.f('ix_event_parent_id'), 'event', ['parent_id'], unique=False)
    op.create_index(op.f('ix_event_registry_id'), 'event', ['registry_id'], unique=False)
    op.create_table('result',
    sa.Column('result_id', sqlmodel.sql.sqltypes.AutoString(length=36), nullable=False),
    sa.Column('execution_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('context_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('location', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('meta', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('labels', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['context_id'], ['context.context_id'], ),
    sa.ForeignKeyConstraint(['execution_id'], ['execution.execution_id'], ),
    sa.PrimaryKeyConstraint('result_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('result')
    op.drop_index(op.f('ix_event_registry_id'), table_name='event')
    op.drop_index(op.f('ix_event_parent_id'), table_name='event')
    op.drop_index(op.f('ix_event_execution_id'), table_name='event')
    op.drop_index(op.f('ix_event_context_id'), table_name='event')
    op.drop_table('event')
    op.drop_table('context')
    op.drop_table('execution')
    op.drop_table('registry')
    op.drop_index(op.f('ix_catalog_resource_version'), table_name='catalog')
    op.drop_table('catalog')
    op.drop_table('resource_type')
    op.drop_table('event_state')
    # ### end Alembic commands ###
