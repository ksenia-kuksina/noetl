apiVersion: noetl.io/v1
kind: Playbook
name: postgres_csv_workflow
path: /playbooks/postgres_csv_workflow

context:
  jobId: "{{ job.uuid }}"
  state: ready
  db:
    host: "localhost"
    port: 5432
    name: "test_db"
    user: "test_user"
    password: "secure_password"
  paths:
    output: "data/exported_data.csv"
    logs: "logs/postgres_csv_{{ job.uuid }}.log"
  logLevel: "INFO"

workbook:
  - task: create_table
    type: python
    desc: "Create table in PostgreSQL database"
    code: |
      import psycopg2
      from urllib.parse import quote_plus

      db_params = {
          'host': context['db']['host'],
          'port': context['db']['port'],
          'dbname': context['db']['name'],
          'user': context['db']['user'],
          'password': context['db']['password']
      }

      try:
          with psycopg2.connect(**db_params) as conn:
              with conn.cursor() as cur:
                  cur.execute("""
                      CREATE TABLE IF NOT EXISTS users (
                          user_id SERIAL PRIMARY KEY,
                          username VARCHAR(50),
                          email VARCHAR(100),
                          created_at TIMESTAMP DEFAULT NOW()
                      );
                  """)
          return {'status': 'success', 'message': 'Table created successfully'}
      except Exception as e:
          return {'status': 'error', 'error': str(e)}

  - task: insert_record
    type: python
    desc: "Insert a record into PostgreSQL database"
    code: |
      import psycopg2

      db_params = {
          'host': context['db']['host'],
          'port': context['db']['port'],
          'dbname': context['db']['name'],
          'user': context['db']['user'],
          'password': context['db']['password']
      }

      try:
          with psycopg2.connect(**db_params) as conn:
              with conn.cursor() as cur:
                  cur.execute("""
                      INSERT INTO users (username, email)
                      VALUES ('johndoe', 'john@example.com');
                  """)
          return {'status': 'success', 'message': 'Record inserted successfully'}
      except Exception as e:
          return {'status': 'error', 'error': str(e)}

  - task: export_to_csv
    type: python
    desc: "Export data from PostgreSQL table to CSV"
    code: |
      import psycopg2
      import csv
      import os

      db_params = {
          'host': context['db']['host'],
          'port': context['db']['port'],
          'dbname': context['db']['name'],
          'user': context['db']['user'],
          'password': context['db']['password']
      }

      try:
          with psycopg2.connect(**db_params) as conn:
              with conn.cursor() as cur:
                  cur.execute("SELECT * FROM users;")
                  rows = cur.fetchall()
                  headers = [desc[0] for desc in cur.description]

                  os.makedirs(os.path.dirname(context['paths']['output']), exist_ok=True)
                  with open(context['paths']['output'], 'w', newline='') as f:
                      writer = csv.writer(f)
                      writer.writerow(headers)
                      writer.writerows(rows)

          return {'status': 'success', 'message': f"Data exported to {context['paths']['output']}"}
      except Exception as e:
          return {'status': 'error', 'error': str(e)}

  - task: log_error
    type: python
    desc: "Log error message"
    code: |
      import logging
      logging.error(f"Error in workflow: {context.get('error', 'Unknown error')}")
      return {
          'status': 'error',
          'message': context.get('error', 'Unknown error'),
          'job_id': context['jobId']
      }

workflow:
  - step: start
    desc: "Start workflow"
    next:
      - when: "{{ context.state == 'ready' }}"
        then: [initialize_db]
      - else: [error_handler]

  - step: initialize_db
    desc: "Initialize database and create table"
    run:
      - task: create_table
    next:
      - when: "{{ results.create_table.status == 'success' }}"
        then: [insert_data]
      - else: [error_handler]

  - step: insert_data
    desc: "Insert test data"
    run:
      - task: insert_record
    next:
      - when: "{{ results.insert_record.status == 'success' }}"
        then: [export_data]
      - else: [error_handler]

  - step: export_data
    desc: "Export data to CSV"
    run:
      - task: export_to_csv
    next:
      - when: "{{ results.export_to_csv.status == 'success' }}"
        then: [complete]
      - else: [error_handler]

  - step: error_handler
    desc: "Handle workflow errors"
    run:
      - task: log_error
    next:
      - then: [end]

  - step: complete
    desc: "Mark workflow as completed"
    run:
      - task: update_status
        type: python
        code: |
          from datetime import datetime
          return {
              'status': 'success',
              'job_id': context['jobId'],
              'completed_at': datetime.now().isoformat()
          }
    next:
      - then: [end]

  - step: end
    desc: "End of workflow"