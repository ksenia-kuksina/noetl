apiVersion: noetl.io/v1
kind: Playbook
name: weather_analysis
path: workflows/weather/noetl_spec_example

workload:
  jobId: "{{ job.uuid }}"
  state: ready
  region: europe
  base_url: "https://api.open-meteo.com/v1"
  cities:
    - name: "London"
      lat: 51.51
      lon: -0.13
    - name: "Paris"
      lat: 48.85
      lon: 2.35
    - name: "Berlin"
      lat: 52.52
      lon: 13.41
  temperature_threshold: 25
  alert_endpoint: "http://localhost:8080/api"
  db_endpoint: "http://localhost:8080/api"

workbook:
  - task: fetch_weather_data
    type: loop
    in: "{{ cities | default([]) }}"
    iterator: city
    run:
      - task: get_forecast
        type: http
        method: GET
        desc: "Get weather forecast for {{ city.name }}"
        endpoint: "{{ base_url }}/forecast"
        params:
          latitude: "{{ city.lat }}"
          longitude: "{{ city.lon }}"
          hourly: "temperature_2m,precipitation_probability,windspeed_10m"
          timezone: "auto"
          forecast_days: 1
        retry: 3
        retry_delay: 5
        on_error: continue

      - task: process_forecast
        type: python
        desc: "Process forecast data for {{ city.name }}"
        with:
          forecast_response: "{{ get_forecast }}"
          city: "{{ city }}"
          temperature_threshold: "{{ workload.temperature_threshold }}"
        code: |
          def main(input):
              city_name = input.get('city', {}).get('name')
              response_data = input.get('forecast_response', {}).get('data', {})
              try:
                  hourly = response_data.get('hourly', {})
                  temps = hourly.get('temperature_2m', [])
                  winds = hourly.get('windspeed_10m', [])
                  max_temp = max(temps) if temps else 0
                  high_wind_hours = len([w for w in winds if w > 20])
                  return {
                      'status': 'success',
                      'data': {
                          'city': city_name,
                          'max_temp': max_temp,
                          'high_wind_hours': high_wind_hours,
                          'needs_alert': max_temp > input.get('temperature_threshold', 0),
                          'raw_data': response_data
                      }
                  }
              except Exception as e:
                  return {
                      'status': 'error',
                      'data': {
                          'city': city_name,
                          'error': str(e),
                          'raw_data': response_data
                      }
                  }


      - task: send_alert
        type: http
        method: POST
        desc: "Send alert for {{ city.name }} if needed"
        endpoint: "{{ workload.alert_endpoint }}/weather-alerts"
        when: "{{ process_forecast.data.needs_alert | default(false) }}"
        payload:
          city: "{{ process_forecast.data.city }}"
          max_temp: "{{ process_forecast.data.max_temp }}"
          severity: "high"
          type: "temperature"
        retry: 3
        retry_delay: 5
        on_error: continue




  - task: store_data
    type: http
    method: POST
    desc: "Store processed weather data"
    endpoint: "{{ workload.db_endpoint }}/weather-data"
    payload:
      results: "{{ data }}"
    retry: 3
    retry_delay: 5
    on_error: continue

  - task: log_error
    type: http
    method: POST
    desc: "Log errors"
    endpoint: "{{ workload.alert_endpoint }}/errors"
    payload:
      jobId: "{{ workload.jobId }}"
      error: "{{ error | default('Unknown error occurred') }}"
      state: "{{ state | default('error') }}"
    retry: 3
    retry_delay: 5
    on_error: continue

workflow:
  - step: start
    desc: "Start workflow"
    next:
      - when: "{{ workload.state == 'ready' }}"
        then:
          - step: fetch_data
      - else:
          - step: end

  - step: fetch_data
    desc: "Fetch and process weather data per city"
    run:
      - task: fetch_weather_data
        with:
          cities: "{{ workload.cities }}"
          base_url: "{{ workload.base_url }}"
          temperature_threshold: "{{ workload.temperature_threshold }}"
    next:
      - when: "{{ fetch_weather_data is defined and fetch_weather_data is sequence and fetch_weather_data|length > 0 }}"

        then:
          - step: store_results
            with:
              data: "{{ fetch_weather_data }}"
      - else:
          - step: error_handler
            with:
              error: "Failed to fetch weather data"
              state: "fetch_failed"

  - step: store_results
    desc: "Store processed weather data"
    run:
      - task: store_data
        with:
          data: "{{ fetch_weather_data }}"
    next:
      - when: "{{ store_data is defined }}"
        then:
          - step: complete
      - else:
          - step: error_handler
            with:
              error: "Failed to store data"
              state: "store_failed"

  - step: error_handler
    desc: Handle errors
    next:
      - when: "{{ error_requires_retry|default(false) }}"
        then:
          - step: retry_handler
      - else:
          - step: end

  - step: retry_handler
    desc: Handle retries
    next:
      - step: end

  - step: complete
    desc: "Complete workflow"
    next:
      - then:
          - step: end

  - step: end
    desc: "End workflow"
