# This is a NoETL DSL Playbook for iterating over cities to fetch and evaluate weather data.
# It includes a loop to process each city, fetch weather data, evaluate conditions, and handle alerts or logging.
# The playbook demonstrates nested loops for processing city districts, with conditions to skip certain districts.
# Create agent to run this playbook using the NoETL DSL.

apiVersion: noetl.io/v1  # Specifies the version of the NoETL DSL
kind: Playbook  # Indicates this is a Playbook definition
name: weather_iterator_example  # Human-readable name for the playbook
path: workflows/weather/weather_iterator_example  # Unique path identifier for this playbook

workload:  # Defines input parameters accessible throughout the workflow
  jobId: "{{ job.uuid }}"
  state: ready
  cities:  # List of cities to process in the loop
    - name: "London"  # City name
      lat: 51.51  # Latitude
      lon: -0.13  # Longitude
    - name: "Paris"
      lat: 48.85
      lon: 2.35
    - name: "Berlin"
      lat: 52.52
      lon: 13.41
  base_url: "https://api.open-meteo.com/v1"  # Base URL for weather API
  temperature_threshold: 25  # Threshold for alerting on temperature

workflow:  # Defines workflow steps and transitions
  - step: start  # Entry point of the workflow
    desc: "Start Weather Analysis Workflow"  # Description of the step
    next:  # Transition rules based on condition
      - when: "{{ workload.state == 'ready' }}"  # Condition for transition
        then:
          - step: city_loop  # If condition met, go to city_loop step
      - else:
          - step: end  # If not ready, end the workflow

  - step: city_loop  # Step to iterate over the list of cities
    desc: "Iterate over cities"
    loop:
      in: "{{ workload.cities }}"  # Input list for iteration
      iterator: city  # Name of the variable for current item in loop
      filter: "{{}}"
    next:
      - step: fetch_and_evaluate  # Next step inside the loop
        with:
          city: "{{ city }}"  # Pass the current city
          base_url: "{{ workload.base_url }}"  # Pass API base URL
          temperature_threshold: "{{ temperature_threshold }}"

  - step: fetch_and_evaluate  # Step to fetch and evaluate weather
    desc: "Fetch and evaluate weather for one city"
    call:
      task: get_forecast  # Task to call
      with:
        city: "{{ city }}"
        base_url: "{{ base_url }}"
        temperature_threshold: "{{ temperature_threshold }}"
    next:
      - when: "{{ get_forecast.result.alert }}"  # Check if alert is needed
        then:
          - step: alert_step  # If alert needed
            with:
              city: "{{ city.name }}"
              max_temp: "{{ get_forecast.result.max_temp }}"
      - else:
          - step: log_step  # If no alert needed
            with:
              city: "{{ city.name }}"

  - step: alert_step  # Sends alert if temperature exceeds threshold
    desc: "Send alert if threshold exceeded"
    call:
      task: alert_task  # Task to call
      with:
        city: "{{ city }}"
        temperature: "{{ max_temp }}"
    next:
      - step: get_city_districts
        city: "{{ city }}"

  - step: log_step  # Logs city without alert
    desc: "Log result if no alert"
    call:
      task: log_task
      with:
        city: "{{ city }}"
    next:
      - step: get_city_districts
        city: "{{ city }}"

  - step: get_city_districts
    desc: "Fetch the districts of the city"
    call:
      task: get_city_districts  # Task to call
      with:
        city: "{{ city.name }}"
    next:
      - step: district_loop
        with:
          city: "{{ city }}" # pass the current city down
          districts: "{{ result }}" # pass an array of districts

  - step: district_loop
    desc: "Iterate over districts of the city"
    loop:
      in: "{{ districts }}"  # Input list for iteration
      iterator: district  # Name of the variable for current item in loop
      filter: "{{ district.name != 'Mordor' }}" # Skip Mordor
    next:
      - step: process_district  # First step in the inner district loop
        with:
          city: "{{ city }}" # Pass the current city down
          district: "{{ district }}"  # Pass the current district

  - step: process_district
    desc: "Do something with the district"
    call:
      task: process_district
      with:
        city: "{{ city }}"
        district: "{{ district }}"
    next:
      - step: end_district_loop
        with:
          output: "{{ output }}" # Pass results of the processing to the inner district loop

  - step: end_district_loop
    desc: "End of the district loop"
    end_loop: district_loop # The loop to monitor
    result:
      district_loop_output: "{{ output }}" # The `output` is appended to the loop results variable called `district_loop_output`
    next:
      - step: end_city_loop
        with:
          district_loop_output: "{{ district_loop_output }}"
          
  - step: end_city_loop
    desc: "End of the city loop"
    end_loop: city_loop
    result:
      alerts: "{{ alert }}" # need to decide how to pass alerts down or refer to `alert_step.result`
    next:
      - step: aggregate_alerts
        with:
          alerts: "{{ alerts }}"
          

  - step: aggregate_alerts
    desc: "Aggregate results after all city loops complete"
    with:
      alerts: "{{ alerts }}" 
    next:
      - step: end

workbook:  # Task definitions used in the workflow

  - task: log_forcast_request  # First subtask to log forecast request
    type: http
    method: GET
    endpoint: "{{ base_url }}/forecast"
    params:
      latitude: "{{ city.lat }}"
      longitude: "{{ city.lon }}"
      hourly: "temperature_2m"
      forecast_days: 1

  - task: get_forecast  # Second subtask to fetch weather data
    type: http
    method: GET
    endpoint: "{{ base_url }}/forecast"
    params:
      latitude: "{{ city.lat }}"
      longitude: "{{ city.lon }}"
      hourly: "temperature_2m"
      forecast_days: 1

  - task: evaluate_weather  # Evaluate weather after getting forecast
    type: python
    with:
      forecast_data: "{{ result.data }}"
      city: "{{ city }}"
      threshold: "{{ temperature_threshold }}"
    code: |
      def main(forecast_data, city, threshold):
          temps = forecast_data.get('hourly', {}).get('temperature_2m', [])
          max_temp = max(temps) if temps else 0
          return {
              "city": city["name"],
              "max_temp": max_temp,
              "alert": max_temp > threshold
          }

  - task: alert_task
    type: http  # Sends an HTTP POST to alert service
    method: POST
    endpoint: "http://alert-service.local/alerts"
    payload:
      city: "{{ city }}"
      temperature: "{{ temperature }}"
      message: "Alert! High temperature."

  - task: log_task
    type: http  # Sends an HTTP POST to log service
    method: POST
    endpoint: "http://log-service.local/logs"
    payload:
      city: "{{ city }}"
      message: "No alert needed."

  - task: get_city_districts
    type: http
    method: GET
    endpoint: "http://geo-service.local/cities/{{ city }}/districts"

  - task: process_district
    type: python
    with:
      city: "{{ city }}"
      district: "{{ district }}"
    code: |
      def main(city, district):
          return {
              "city": city["name"],
              "district": district["name"],
              "processed": True,
              "timestamp": "2024-01-01T12:00:00Z"
          }