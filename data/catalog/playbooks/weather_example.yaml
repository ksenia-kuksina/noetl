apiVersion: noetl.io/v1
kind: Playbook
name: weather_analysis
path: workflows/weather/noetl_spec_example

context:
  jobId: "{{ job.uuid }}"
  state: ready
  region: europe
  base_url: "https://api.open-meteo.com/v1"
  cities:
    - name: "London"
      lat: 51.51
      lon: -0.13
    - name: "Paris"
      lat: 48.85
      lon: 2.35
    - name: "Berlin"
      lat: 52.52
      lon: 13.41
  temperature_threshold: 25
  alert_endpoint: "https://alerts.noetl.io/api"
  db_endpoint: "https://db.noetl.io/api"

workbook:
  - task: fetch_weather_data
    type: runner
    desc: "Fetch weather data for multiple cities"
    loop:
      in: "{{ context.cities }}"
      iterator: city
    run:
      - task: "get_forecast_{{ city.name }}"
        type: http
        method: GET
        desc: "Get weather forecast for {{ city.name }}"
        endpoint: "{{ context.base_url }}/forecast"
        params:
          latitude: "{{ city.lat }}"
          longitude: "{{ city.lon }}"
          hourly: "temperature_2m,precipitation_probability,windspeed_10m"
          timezone: "auto"
          forecast_days: 1
        run:
          - task: "process_forecast_{{ city.name }}"
            type: python
            desc: "Process forecast data for {{ city.name }}"
            code: |
              def main(context, results):
                  city_name = '{{ city.name }}'
                  logger.info(f"Process forecast data for {city_name}.  Context: {context}")
                  logger.info(f"Process forecast data for {city_name}.  Parent Task Results: {results}")
                  if isinstance(results, dict):
                      if 'data' in results:
                          response_data = results['data']
                      else:
                          response_data = results
                  else:
                      response_data = {'error': 'Invalid response format'}
                      logger.error(f"Process forecast data for {city_name}. Invalid response format: {results}")
                      return response_data
          
                  logger.info(f"Process forecast data for {city_name}.  Response data: {response_data}")
          
                  try:
                      hourly_data = response_data.get('hourly', {})
                      temps = hourly_data.get('temperature_2m', [0])
                      winds = hourly_data.get('windspeed_10m', [])
          
                      max_temp = max(temps) if temps else 0
                      high_wind_hours = len([w for w in winds if w > 20]) if winds else 0
          
                      result = {
                          'city': '{{ city.name }}',
                          'max_temp': max_temp,
                          'high_wind_hours': high_wind_hours,
                          'needs_alert': max_temp > context['temperature_threshold'],
                          'raw_data': response_data
                      }
          
                      logger.debug(f"Forecast data processed for {city_name}. Result: {result}")
                      return result
          
                  except Exception as e:
                      error_msg = f"Error processing data: {str(e)}"
                      logger.error(error_msg)
                      return {
                          'city': '{{ city.name }}',
                          'error': error_msg,
                          'raw_data': response_data
                      }

  - task: analyze_weather_patterns
    type: python
    desc: "Analyze weather patterns across cities"
    code: |
      def main(context, results):
          import json
          
          raw_data_str = context.get('fetch_weather_data', '[]')
          cities_data = []
          errors = []
      
          try:
              logger.debug(f"Raw data string type: {type(raw_data_str)}")
              logger.debug(f"Raw data string: {raw_data_str}")
      
              if isinstance(raw_data_str, (list, dict)):
                  raw_data = raw_data_str
              else:
                  import ast
                  python_obj = ast.literal_eval(raw_data_str)
                  json_str = json.dumps(python_obj)
                  raw_data = json.loads(json_str)
              
              for city_result in raw_data:
                  logger.debug(f"Processing city result: {city_result.get('status')} - {city_result.get('data', {}).get('city')}")
                  
                  if city_result.get('status') == 'success':
                      city_data = city_result['data']
                      cities_data.append({
                          'city': city_data['city'],
                          'max_temp': city_data['max_temp'],
                          'high_wind_hours': city_data['high_wind_hours'],
                          'needs_alert': city_data['needs_alert']
                      })
                  else:
                      errors.append(city_result)
          except (json.JSONDecodeError, ValueError, SyntaxError) as e:
              logger.error(f"Data parsing error: {str(e)}")
              errors.append({'error': f'Failed to parse weather data: {str(e)}'})
          except Exception as e:
              logger.error(f"Error processing city data: {str(e)}")
              errors.append({'error': str(e)})
      
          logger.info(f"[Task: analyze_weather_patterns] Cities data: {cities_data}")
          alert_cities = [city for city in cities_data if city['needs_alert']]
      
          result = {
              'total_cities': len(cities_data),
              'alert_needed': len(alert_cities) > 0,
              'alert_cities': alert_cities,
              'cities_data': cities_data,
              'errors': errors,
              'has_errors': len(errors) > 0
          }
      
          logger.info(f"[Task: analyze_weather_patterns] Analysis result: {result}")
          return result

  - task: send_alerts
    type: http
    method: POST
    desc: "Send alerts for high temperature cities"
    endpoint: "{{ context.alert_endpoint }}/weather-alerts"
    payload:
      cities: "{{ context.analyze_weather_patterns.data.alert_cities }}"
      severity: "high"
      type: "temperature"

  - task: store_data
    type: http
    method: POST
    desc: "Store processed weather data"
    endpoint: "{{ context.db_endpoint }}/weather-data"
    payload: "{{ context.fetch_weather_data }}"

  - task: log_error
    type: http
    method: POST
    desc: "Log errors"
    endpoint: "{{ context.alert_endpoint }}/errors"
    payload:
      jobId: "{{ context.jobId }}"
      error: "{{ context.error if context is defined and context.error is defined else 'Unknown error occurred' }}"
      state: "{{ context.state if context is defined and context.state is defined else 'error' }}"

  - task: update_status
    type: http
    method: POST
    desc: "Update job status"
    endpoint: "{{ context.db_endpoint }}/jobs/{{ context.jobId }}"
    payload:
      status: "completed"
      timestamp: "{{ now() }}"

workflow:
  - step: start
    next:
      - when: "{{ context.state == 'ready' }}"
        then:
          - step: fetch_data
      - when: "{{ context.state == 'error' }}"
        then:
          - step: error_handler
      - else:
          - step: end

  - step: fetch_data
    desc: "Fetch weather data for given cities"
    run:
      - task: fetch_weather_data
    next:
      - when: "{{ results.fetch_weather_data is not none }}"
        then:
          - step: analyze_data
            fetch_weather_data: "{{ results.fetch_weather_data }}"
      - when: "{{ results.fetch_weather_data is none }}"
        then:
          - step: error_handler
      - else:
          - step: end

  - step: analyze_data
    desc: "Analyze weather data and trigger alerts if needed"
    run:
      - task: analyze_weather_patterns
    next:
      - when: "{{ results.analyze_weather_patterns.data.alert_needed }}"
        then:
          - step: send_alerts
            analyze_weather_patterns: "{{ results.analyze_weather_patterns }}"
          - step: store_results
            analyze_weather_patterns: "{{ results.analyze_weather_patterns }}"
      - when: "{{ not results.analyze_weather_patterns.data.alert_needed }}"
        then:
          - step: store_results
            analyze_weather_patterns: "{{ results.analyze_weather_patterns }}"
      - else:
          - step: error_handler

  - step: send_alerts
    desc: "Send alerts for cities with high temperatures"
    when: "{{ context.analyze_weather_patterns is defined and context.analyze_weather_patterns.data.alert_cities|length > 0 }}"
    run:
      - task: send_alerts
    next:
      - when: "{{ results.send_alerts.status == 'success' }}"
        then:
          - step: store_results
            send_alerts: "{{ results.send_alerts }}"
      - when: "{{ results.send_alerts.status != 'success' }}"
        then:
          - step: error_handler
      - else:
          - step: error_handler

  - step: store_results
    desc: "Store processed weather data in database"
    run:
      - task: store_data
    next:
      - when: "{{ results.store_data.status == 'success' }}"
        then:
          - step: complete
      - when: "{{ results.store_data.status != 'success' }}"
        then:
          - step: error_handler
      - else:
          - step: error_handler

  - step: error_handler
    desc: "Handle errors in the workflow"
    run:
      - task: log_error
        type: http
        method: POST
        desc: "Log errors"
        endpoint: "{{ context.alert_endpoint }}/errors"
        payload:
          jobId: "{{ context.jobId }}"
          error: "{{ context.error | default('Unknown error occurred') }}"
          state: "{{ context.state | default('error') }}"
    next:
      - then:
          - step: end


  - step: complete
    desc: "Final step to mark workflow completion"
    run:
      - task: update_status
    next:
      - then:
          - step: end

  - step: end
    desc: "The end of workflow"
