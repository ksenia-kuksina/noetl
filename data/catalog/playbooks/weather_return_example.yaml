apiVersion: noetl.io/v1
kind: Playbook
name: weather_analysis
path: workflows/weather/noetl_return_example

workload:
  jobId: "{{ job.uuid }}"
  state: ready
  region: europe
  base_url: "https://api.open-meteo.com/v1"
  cities:
    - name: "London"
      lat: 51.51
      lon: -0.13
    - name: "Paris"
      lat: 48.85
      lon: 2.35
    - name: "Berlin"
      lat: 52.52
      lon: 13.41
  temperature_threshold: 25
  alert_endpoint: "http://localhost:8080/api"
  db_endpoint: "http://localhost:8080/api"

workbook:
  - task: fetch_weather_data
    type: loop
    in: "{{ cities | default([]) }}"
    iterator: city
    return:
      summary:
        total_cities: "{{ result.results | length }}"
        successful_forecasts: "{{ result.results | selectattr('process_forecast.result.status', 'equalto', 'success') | list | length }}"
        alerts_triggered: "{{ result.results | selectattr('process_forecast.result.data.needs_alert', 'defined') | selectattr('process_forecast.result.data.needs_alert') | list | length }}"
      city_results: "{{ result.results | map(attribute='process_forecast.result.data') | list }}"
      alerts: "{{ result.results | selectattr('send_alert.status', 'equalto', 'success') | map(attribute='send_alert.result') | list }}"
      errors: "{{ result.results | selectattr('process_forecast.status', 'equalto', 'error') | map(attribute='process_forecast.result.error') | list }}"
      execution_metadata:
        start_time: "{{ now() }}"
        end_time: "{{ now() }}"
        region: "{{ workload.region }}"

    run:
      - task: get_forecast
        type: http
        method: GET
        desc: "Get weather forecast for {{ city.name }}"
        endpoint: "{{ base_url }}/forecast"
        params:
          latitude: "{{ city.lat }}"
          longitude: "{{ city.lon }}"
          hourly: "temperature_2m,precipitation_probability,windspeed_10m"
          timezone: "auto"
          forecast_days: 1
        retry: 3
        retry_delay: 5
        on_error: continue
        return:
          request_status: "{{ status }}"
          response_data: "{{ result }}"
          city_info: "{{ city }}"

      - task: process_forecast
        type: python
        desc: "Process forecast data for {{ city.name }}"
        with:
          forecast_response: "{{ get_forecast.result | default({}) }}"
          city: "{{ city | to_json }}"
          temperature_threshold: "{{ temperature_threshold }}"
        code: |
          def main(city, forecast_response, temperature_threshold):
              logger.info(f"Processing forecast input for city: {city}")
              city_name = city.get('name') if city else None
              response_data = forecast_response.get('response_data', {})
              try:
                  hourly = response_data.get('hourly', {})
                  temps = hourly.get('temperature_2m', [])
                  winds = hourly.get('windspeed_10m', [])
                  max_temp = max(temps) if temps else 0
                  high_wind_hours = len([w for w in winds if w > 20])
                  return {
                      'status': 'success',
                      'data': {
                          'city': city_name,
                          'max_temp': max_temp,
                          'high_wind_hours': high_wind_hours,
                          'needs_alert': max_temp > temperature_threshold,
                          'raw_data': response_data
                      }
                  }
              except Exception as e:
                  return {
                      'status': 'error',
                      'data': {
                          'city': city_name,
                          'error': str(e),
                          'raw_data': response_data
                      }
                  }


        call:
          - task: send_alert
            with:
              process_forecast: "{{ process_forecast.result | default({}) }}"
            when: "{{ process_forecast.result.data.needs_alert | default(false) }}"
        return:
          status: "{{ result.status }}"
          processed_data: "{{ result.data }}"
          alert_status: "{{ 
            send_alert.result.status if result.data.needs_alert else 'not_needed' 
          }}"
          city_details: {
            name: "{{ city.name }}",
            coordinates: {
              lat: "{{ city.lat }}",
              lon: "{{ city.lon }}"
            }
          }
          processing_timestamp: "{{ now() }}"
#  - step: fetch_data
#    desc: "Fetch and process weather data per city"
#    call:
#      - task: fetch_weather_data
#        with:
#          cities: "{{ workload.cities }}"
#          base_url: "{{ workload.base_url }}"
#          temperature_threshold: "{{ workload.temperature_threshold }}"
#    return:
#      summary:
#        total_cities: "{{ fetch_weather_data.result.results | length if fetch_weather_data.result and 'results' in fetch_weather_data.result else 0 }}"
#        successful_forecasts: "{{ fetch_weather_data.result.summary.successful_forecasts if fetch_weather_data.result and 'summary' in fetch_weather_data.result else 0 }}"
#        alerts_triggered: "{{ (fetch_weather_data.result.results | selectattr('process_forecast.result.data.needs_alert', 'defined') | selectattr('process_forecast.result.data.needs_alert') | list | length) if fetch_weather_data.result and 'results' in fetch_weather_data.result else 0 }}"
#      city_results: "{{ fetch_weather_data.result.results | map(attribute='process_forecast.result.data') | list if fetch_weather_data.result and 'results' in fetch_weather_data.result else [] }}"
#      alerts: "{{ fetch_weather_data.result.results | selectattr('send_alert.status', 'defined') | selectattr('send_alert.status', 'equalto', 'success') | map(attribute='send_alert.result') | list if fetch_weather_data.result and 'results' in fetch_weather_data.result else [] }}"
#      errors: "{{ fetch_weather_data.result.results | selectattr('process_forecast.status', 'defined') | selectattr('process_forecast.status', 'equalto', 'error') | map(attribute='process_forecast.result.error') | list if fetch_weather_data.result and 'results' in fetch_weather_data.result else [] }}"
#      execution_metadata:
#        start_time: "{{ now() }}"
#        end_time: "{{ now() }}"
#        region: "{{ workload.region }}"



  - task: send_alert
    type: http
    method: POST
    desc: "Send alert for {{ city.name }} if needed"
    endpoint: "{{ alert_endpoint }}/weather-alerts"
    when: "{{ data.needs_alert | default(false) }}"
    payload:
      city: "{{ data.city }}"
      max_temp: "{{ data.max_temp }}"
      severity: "high"
      type: "temperature"
    retry: 3
    retry_delay: 5
    on_error: continue
    return:
      alert_sent: "{{ status == 'success' }}"
      timestamp: "{{ now() }}"
      details: {
        endpoint: "{{ alert_endpoint }}",
        city: "{{ data.city }}",
        response_code: "{{ result.status_code | default(0) }}"
      }

  - task: store_data
    type: http
    method: POST
    desc: "Store processed weather data"
    endpoint: "{{ db_endpoint | default('http://localhost:8080/api') }}/weather-data"
    payload:
      results: "{{ data }}"
    retry: 3
    retry_delay: 5
    on_error: continue
    return:
      storage_status: "{{ status }}"
      stored_records: "{{ data | length }}"
      storage_timestamp: "{{ now() }}"

  - task: log_error
    type: http
    method: POST
    desc: "Log errors"
    endpoint: "{{ alert_endpoint }}/errors"
    payload:
      jobId: "{{ jobId }}"
      error: "{{ error | default('Unknown error occurred') }}"
      state: "{{ state | default('error') }}"
    retry: 3
    retry_delay: 5
    on_error: continue

workflow:
  - step: start
    desc: "Start workflow"
    next:
      - when: "{{ workload.state == 'ready' }}"
        then:
          - step: fetch_data
      - else:
          - step: end

  - step: loop_begin
    desc: "Begin processing cities"
    next:
      - step: fetch_data

  - step: fetch_data
    desc: "Fetch and process weather data per city"
    loop:
      in: "{{ workload.cities | default([]) }}"
      iterator: city
    call:
      - task: fetch_weather_data
        with:
          cities: "{{ workload.cities }}"
          base_url: "{{ workload.base_url }}"
          db_endpoint: "{{ workload.db_endpoint }}"
          temperature_threshold: "{{ workload.temperature_threshold }}"
    next:
      - when: "{{ fetch_weather_data.result.summary.successful_forecasts > 0 if fetch_weather_data.result and 'summary' in fetch_weather_data.result else false }}"
        then:
          - step: store_results
            with:
              db_endpoint: "{{ workload.db_endpoint }}"
              data: "{{ fetch_weather_data.result.results | map(attribute='process_forecast.result.data') | list if fetch_weather_data.result and 'results' in fetch_weather_data.result else [] }}"
              metadata: "{{ return.execution_metadata if return is defined and 'execution_metadata' in return else {} }}"
      - else:
          - step: error_handler
            with:
              error: "Fetch weather data failed or returned no successful forecasts"
              state: "fetch_failed"


  - step: store_results
    desc: "Store processed weather data"
    call:
      - task: store_data
        with:
          db_endpoint: "{{ workload.db_endpoint | default('http://localhost:8080/api') }}"
          data: "{{ data }}"

    next:
      - when: "{{ store_data.result.storage_status == 'success' }}"
        then:
          - step: complete
            with:
              completion_data: "{{ store_data.result }}"
      - else:
          - step: error_handler
            with:
              error: "Storage failed"
              state: "store_failed"

  - step: error_handler
    desc: Handle errors
    next:
      - when: "{{ error_requires_retry|default(false) }}"
        then:
          - step: retry_handler
      - else:
          - step: end

  - step: retry_handler
    desc: Handle retries
    next:
      - step: end

  - step: complete
    desc: "Complete workflow"
    next:
      - then:
          - step: end

  - step: end
    desc: "End workflow"