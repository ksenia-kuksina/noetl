apiVersion: noetl.io/v1
kind: Playbook
name: csv_import_export
path: /playbook/noetl-csv-sync-test/csv-import-export

context:
  jobId: "{{ job.uuid }}"
  state: ready
  baseFilePath: "."
  dataPath: "data"
  baseUrl: "http://localhost:8082"

workbook:
  - task: import_csv
    type: http
    desc: "Import CSV file to Postgres using pg router"
    method: POST
    endpoint: "{{ context.baseUrl }}/pg/csv/import"
    params:
      table_name: "target_table"
      file_path: "{{ context.dataPath }}/noetl_postgres_db/test_data.csv"
      schema_name: "public"
      column_names: []

  - task: export_csv
    type: http
    desc: "Export CSV file from Postgres using pg router"
    method: POST
    endpoint: "{{ context.baseUrl }}/pg/csv/export"
    params:
      query: "SELECT * FROM target_table;"
      file_path: "{{ context.dataPath }}/noetl_postgres_db/exported_data.csv"

workflow:
  - step: start
    desc: "Start workflow"
    next:
      - when: "{{ context.state == 'ready' }}"
        then: [import_data]
      - else: [error_handler]

  - step: import_data
    desc: "Import CSV data to Postgres"
    run:
      - task: import_csv
    next:
      - when: "{{ results.import_csv.status == 'success' }}"
        then: [export_data]
      - else: [error_handler]

  - step: export_data
    desc: "Export data from Postgres to CSV"
    run:
      - task: export_csv
    next:
      - when: "{{ results.export_csv.status == 'success' }}"
        then: [complete]
      - else: [error_handler]

  - step: error_handler
    desc: "Handle workflow errors"
    run:
      - task: log_error
        type: python
        code: |
          import logging
          error_msg = f"Workflow error: {context.get('error', 'Unknown error')}"
          logging.error(error_msg)
          return {
              'status': 'error',
              'message': error_msg,
              'job_id': context.get('jobId')
          }
    next:
      - then: [end]

  - step: complete
    desc: "Mark workflow as completed"
    run:
      - task: update_status
        type: python
        code: |
          from datetime import datetime
          return {
              'status': 'success',
              'job_id': context.get('jobId'),
              'completed_at': datetime.now().isoformat()
          }
    next:
      - then: [end]

  - step: end
    desc: "End of workflow"