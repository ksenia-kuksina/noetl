apiVersion: apps/v1
kind: Deployment
metadata:
  name: noetl-server
  labels:
    app: noetl
    component: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: noetl
      component: server
  template:
    metadata:
      labels:
        app: noetl
        component: server
    spec:
      containers:
      - name: noetl
        image: noetl:latest
        ports:
        - containerPort: 8080
        env:
        - name: NOETL_RUN_MODE
          value: "server"
        - name: NOETL_HOST
          value: "0.0.0.0"
        - name: NOETL_PORT
          value: "8080"
        - name: NOETL_DEBUG
          value: "false"
        - name: NOETL_WORKERS
          value: "2"
        - name: NOETL_RELOAD
          value: "false"
        - name: NOETL_NO_UI
          value: "false"
        - name: PYTHONPATH
          value: "/opt/noetl"
        volumeMounts:
        - name: noetl-data
          mountPath: /opt/noetl/data
        - name: noetl-playbooks
          mountPath: /opt/noetl/playbooks
        - name: noetl-secrets
          mountPath: /secrets
        command: ["noetl", "server", "start", "--host", "0.0.0.0", "--port", "8080", "--workers", "2"]
      volumes:
      - name: noetl-data
        persistentVolumeClaim:
          claimName: noetl-data-pvc
      - name: noetl-playbooks
        persistentVolumeClaim:
          claimName: noetl-playbooks-pvc
      - name: noetl-secrets
        secret:
          secretName: noetl-secrets

---
# Worker deployment template
apiVersion: apps/v1
kind: Deployment
metadata:
  name: noetl-worker
  labels:
    app: noetl
    component: worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: noetl
      component: worker
  template:
    metadata:
      labels:
        app: noetl
        component: worker
    spec:
      containers:
      - name: noetl-worker
        image: noetl:latest
        env:
        - name: NOETL_RUN_MODE
          value: "worker"
        - name: NOETL_PLAYBOOK_PATH
          value: "/opt/noetl/playbooks/example_playbook.yaml"  # Replace with actual playbook path
        - name: NOETL_PLAYBOOK_VERSION
          value: ""  # Optional: specify version if needed
        - name: NOETL_MOCK_MODE
          value: "false"
        - name: NOETL_DEBUG
          value: "false"
        - name: PYTHONPATH
          value: "/opt/noetl"
        volumeMounts:
        - name: noetl-data
          mountPath: /opt/noetl/data
        - name: noetl-playbooks
          mountPath: /opt/noetl/playbooks
        - name: noetl-secrets
          mountPath: /secrets
        command: ["noetl", "worker", "/opt/noetl/playbooks/example_playbook.yaml"]
      volumes:
      - name: noetl-data
        persistentVolumeClaim:
          claimName: noetl-data-pvc
      - name: noetl-playbooks
        persistentVolumeClaim:
          claimName: noetl-playbooks-pvc
      - name: noetl-secrets
        secret:
          secretName: noetl-secrets

---
# CLI deployment template
apiVersion: apps/v1
kind: Deployment
metadata:
  name: noetl-cli
  labels:
    app: noetl
    component: cli
spec:
  replicas: 1
  selector:
    matchLabels:
      app: noetl
      component: cli
  template:
    metadata:
      labels:
        app: noetl
        component: cli
    spec:
      containers:
      - name: noetl-cli
        image: noetl:latest
        env:
        - name: NOETL_RUN_MODE
          value: "cli"
        - name: PYTHONPATH
          value: "/opt/noetl"
        volumeMounts:
        - name: noetl-data
          mountPath: /opt/noetl/data
        - name: noetl-playbooks
          mountPath: /opt/noetl/playbooks
        - name: noetl-secrets
          mountPath: /secrets
        command: ["noetl", "cli"]
      volumes:
      - name: noetl-data
        persistentVolumeClaim:
          claimName: noetl-data-pvc
      - name: noetl-playbooks
        persistentVolumeClaim:
          claimName: noetl-playbooks-pvc
      - name: noetl-secrets
        secret:
          secretName: noetl-secrets

---
apiVersion: v1
kind: Service
metadata:
  name: noetl-service
  labels:
    app: noetl
    component: server
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: noetl
    component: server

